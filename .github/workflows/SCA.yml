name: Step 2.1 - SCA # Nombre del workflow que podremos visualizar en la pestaña de 'Actions' posteriormente cuando se ejecute.

on: # Define cuando debe ejecutarse el workflow.
  workflow_call: # Permite que otros workflows puedan llamarlo desde el mismo repositorio o desde repositorios diferentes.
  workflow_dispatch: # Permite ejecutarlo manualmente desde la interfaz de GitHub.

jobs: # Se usa para definir uno o más trabajos (independientes o secuenciales) a ejecutar. Cada job puede tener uno o varios steps, independientes o secuenciales (needs), y correr en entornos distintos (Ubuntu, Windows, MacOS).
  dependency-check: # Escaneo de dependencias de terceros con OWASP Dependency-Check. Este nombre se usa como ID interno del job para poder referenciarlo o establecer dependencias (needs) en otros jobs.
    runs-on: ubuntu-latest # Runner (maquina virtual) donde se va a ejecutar este job
    
    steps: # Se usa para definir uno o mas pasos que se deben ejecutar, de manera independiente o secuencial, para realizar el job.
    
      - name: Checkout repository
        uses: actions/checkout@v4 # Accion oficial para descargarnos el codigo del repositorio en el runner de GitHub Actions para que los siguientes steps tengan acceso a el.

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main # Usamos la acción oficial de GitHub para ejecutar OWASP Dependency-Check.
        
        with: # En este caso necesitaremos pasar unos parámetros de configuracion obligatorios para que pueda finalizar correctamente.
          # Parámetros OBLIGATORIOS segun la documentación de la accion que estamos usando:
          project: "tfm" # Definimos el nombre del proyecto en los reportes, aparecerá como una etiqueta en el informe generado.
          path: "." # Especificamos la ruta del código a analizar, en este caso la raíz del repositorio.
          format: "HTML" # Indicamos el formato de salida del reporte
