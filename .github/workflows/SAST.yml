name: Step 2.2 - SAST # Nombre del workflow que podremos visualizar en la pestaña de 'Actions' posteriormente cuando se ejecute.

on: # Define cuando debe ejecutarse el workflow.
  workflow_call: # Permite que otros workflows puedan llamarlo desde el mismo repositorio o desde repositorios diferentes.
  workflow_dispatch: # Permite ejecutarlo manualmente desde la interfaz de GitHub.

jobs: # Se usa para definir uno o más trabajos (independientes o secuenciales) a ejecutar. Cada job puede tener uno o varios steps, independientes o secuenciales (needs), y correr en entornos distintos (Ubuntu, Windows, MacOS).
  semgrep-sast: # Pruebas estáticas de seguridad de aplicaciones con Semgrep. Este nombre se usa como ID interno del job para poder referenciarlo o establecer dependencias (needs) en otros jobs.
    name: Semgrep SAST
    runs-on: ubuntu-latest # Runner (maquina virtual) donde se va a ejecutar este job.

    permissions: # Define los permisos que GitHub le da al workflow en tiempo de ejecución.
      contents: read # Permite el acceso de lectura al código fuente del repositorio.
      security-events: write # Permite poder subir los resultados del escaneo (en formato .SARIF) al Security Dashboard de GitHub.

    steps: # Se usa para definir uno o más pasos que se deben ejecutar, de manera independiente o secuencial, para realizar el job.
      
      - name: Checkout repository
        uses: actions/checkout@v4 # Acción oficial para descargarnos el código del repositorio en el runner de GitHub Actions para que los siguientes steps tengan acceso a el.

      - name: Install Semgrep
        run: pipx install semgrep # Instalamos Semgrep en el runner para que, via Python, pueda utilizar el comando "semgrep".

      - name: Run Semgrep SAST
      # Antes de lanzar el análisis, necesitamos crear un directorio que se usará como output de los resultados, para ello usamos:
        # mkdir -p results
      # Acto seguido, ejecutamos semgrep para realizar las pruebas estáticas de seguridad de aplicaciones con los siguientes parámetros:
        # semgrep scan -> lanza semgrep en modo SAST.
        # --config auto -> Elige las reglas automaticamente en función del lenguaje detectado en el repositorio.
        # --sarif -> Genera la salida en formato SARIF, estándar soportado por GitHub Security Dashboard.
        # --output results/semgrep-results.sarif -> Nombre del archivo y directorio donde se guardaran los resultados.
        # . -> Escanea todo el repositorio.
        run: |
          mkdir -p results
          semgrep scan --config auto --sarif --output results/semgrep-results.sarif .

      - name: Upload SARIF to GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@v3 # Accion oficial de Github para subir informes en formato SARIF, generados por el step anterior, al Security Dashboard.
        if: success() || failure() # De esta manera siempre se subirán los resultados al Security Dashboard, falle o no. Fallar significa que el workflow devuelva un código de error distinto a 0.
        with:
          sarif_file: results/semgrep-results.sarif # Nombre del archivo y directorio donde se guardaron los resultados al finalizar el escaneo de Semgrep.
