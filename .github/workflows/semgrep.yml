# Name of this GitHub Actions workflow.
name: Semgrep

on:
  # Scan on-demand via DevSecOps Pipeline Orchestator:
  workflow_call: {}
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}

jobs:
  semgrep_scan:
    # User definable name of this GitHub Actions job.
    name: semgrep/ci
    # If you are self-hosting, change the following `runs-on` value:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: returntocorp/semgrep

    steps:
      # Fetch project source with GitHub Actions Checkout.
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Perform Semgrep Analysis
      # @NOTE: This is the actual semgrep command to scan your code.
      # Modify the --config option to 'r/all' to scan using all rules,
      # or use multiple flags to specify particular rules, such as
      # --config r/all --config custom/rules
        run: semgrep scan -q --sarif --config auto ./vulnerable-source-code > semgrep-results.sarif

      # upload the results for the CodeQL GitHub app to annotate the code
      - name: Save SARIF results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-scan-results
          path: semgrep-results.sarif

      # Upload SARIF file generated in previous step
      - name: Upload SARIF result to the GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
        if: always()
