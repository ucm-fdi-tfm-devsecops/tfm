name: Step 5 - IaC Security # Nombre del workflow que podremos visualizar en la pestaña de 'Actions' posteriormente cuando se ejecute.

on: # Define cuando debe ejecutarse el workflow.
  workflow_call: # Permite que otros workflows puedan llamarlo desde el mismo repositorio o desde repositorios diferentes.
  workflow_dispatch: # Permite ejecutarlo manualmente desde la interfaz de GitHub.

jobs: # Se usa para definir uno o más trabajos (independientes o secuenciales) a ejecutar. Cada job puede tener uno o varios steps, independientes o secuenciales (needs), y correr en entornos distintos (Ubuntu, Windows, MacOS).
  checkov: # Seguridad de Infraestructura como Código con Checkov. Este nombre se usa como ID interno del job para poder referenciarlo o establecer dependencias (needs) en otros jobs.
    runs-on: ubuntu-latest # Runner (maquina virtual) donde se va a ejecutar este job.
    permissions: # Define los permisos que GitHub le da al workflow en tiempo de ejecución.
      contents: read # Permite el acceso de lectura al código fuente del repositorio.
      security-events: write # Permite poder subir los resultados del escaneo (en formato .SARIF) al Security Dashboard de GitHub.
      
    steps: # Se usa para definir uno o más pasos que se deben ejecutar, de manera independiente o secuencial, para realizar el job.
      - name: Checkout repository
        uses: actions/checkout@v4 # Acción oficial para descargarnos el código del repositorio en el runner de GitHub Actions para que los siguientes steps tengan acceso a el.

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12 # Usamos la acción oficial de GitHub para ejecutar Checkov.
        continue-on-error: true
        with: # En este caso necesitaremos pasar un parámetro de configuración obligatorio para que pueda finalizar correctamente, los demas son opcionales y en funcion de lo que se vaya a escanear.
          # Parámetro OBLIGATORIO segun la documentación de la acción que estamos usando:
          directory: . # Especificamos qué queremos analizar, en este caso la raiz del repositorio.
          # Parámetros OPCIONALES configurados ad hoc para nuestro repositorio.
          framework: dockerfile # Por defecto lo detecta automáticamente (terraform, kubernetes, dockerfile, etc.). Pero en nuestro caso como solo queremos analizar un dockerfile, lo forzamos.
          soft_fail: false   # Controla si el Pipeline debe fallar (false) o continuar (true) en caso de encontrar errores o vulnerabilidades.
          output_format: cli,sarif # Define el formato de los resultados, por defecto es 'cli' ya que los muestra por consola. Nosotros añadimos 'sarif' porque queremos que tambien se muestre en el apartado de Code Scanning.
          output_file_path: console,results.sarif # Sirve para exportar resultados a ficheros, por defecto lo muestra en la consola. Nosotros añadimos 'results.sarif' para poder subirlo en otro step al apartado de Code Scanning.
        
      - name: Upload SARIF to GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@v3 # Accion oficial de Github para subir informes en formato SARIF, generados por el step anterior, al Security Dashboard.
        if: success() || failure() # De esta manera siempre se subiran los resultados al Security Dashboard, falle o no. Fallar significa que el workflow devuelva un código de error distinto a 0.
        with:
          sarif_file: results.sarif # Nombre del archivo y directorio donde se guardaron los resultados al finalizar el escaneo.
