# Nombre descriptivo del workflow
name: Trivy Scan + Cosign Signing (Keyless, GHCR)

# Eventos que activan el workflow:
# - Manualmente desde la UI (workflow_dispatch)
# - Desde otro workflow (workflow_call)
on:
  workflow_dispatch:
  workflow_call:

# Permisos que el GITHUB_TOKEN necesitar√° para este flujo:
permissions:
  id-token: write      # Necesario para autenticarse v√≠a OIDC con Cosign
  packages: write      # Necesario para subir la imagen al registro GHCR
  contents: read       # Permite leer el c√≥digo del repositorio

jobs:
  scan-and-sign:
    runs-on: ubuntu-latest  # Utilizamos Ubuntu como runner porque es m√°s compatible con contenedores y herramientas DevSecOps

    steps:
      # 1Ô∏è‚É£ Clonamos el repositorio en el runner para tener acceso al c√≥digo fuente y al Dockerfile
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Login a GHCR usando GITHUB_TOKEN (esto permite hacer push al container registry)
      - name: Login to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # 3Ô∏è‚É£ Definimos la variable IMAGE con el nombre y etiqueta que usaremos para la imagen
      - name: Define image name
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/tfm-app:${{ github.sha }}
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      # 4Ô∏è‚É£ Construimos la imagen Docker desde un Dockerfile en el proyecto
      - name: Build Docker image
        run: docker build -t $IMAGE -f src/docker/Dockerfile .

      # 5Ô∏è‚É£ Instalamos Trivy (esc√°ner de vulnerabilidades) usando el instalador oficial
      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image           # Tipo de an√°lisis: imagen de contenedor
          image-ref: ${{ env.IMAGE }} # Usamos la imagen reci√©n construida
          format: json               # Guardamos el informe en formato JSON
          output: trivy-report.json  # Nombre del archivo de salida

      # 6Ô∏è‚É£ Subimos el reporte de Trivy como artefacto descargable desde la UI de Actions
      - name: Upload Trivy Scan Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-report.json
          if-no-files-found: ignore

      # 7Ô∏è‚É£ Subimos la imagen escaneada a GHCR
      - name: Push Docker image to GHCR
        run: docker push $IMAGE

      # 8Ô∏è‚É£ Obtenemos el digest (hash √∫nico e inmutable) de la imagen reci√©n subida
      - name: Get image digest
        id: digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE)
          echo "DIGEST=$DIGEST" >> $GITHUB_ENV
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      # 9Ô∏è‚É£ Instalamos Cosign (herramienta para firmar im√°genes OCI)
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      # üîü Firmamos la imagen usando autenticaci√≥n sin claves (keyless) a trav√©s de OIDC (usando el token ID de GitHub Actions)
      - name: Sign Docker image with Cosign (Keyless)
        run: cosign sign --yes $DIGEST
