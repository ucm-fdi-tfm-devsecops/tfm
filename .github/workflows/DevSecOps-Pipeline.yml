name: DevSecOps Pipeline

on:
  workflow_dispatch: # Para lanzar unicamente el workflow de manera manual.
  
    inputs: 
    # Variables que pueden ser llamadas en los workflows.
      registry:
        description: "Container registry (ghcr.io, docker.io, ...)"
        required: true
        default: "ghcr.io"
      image_name:
        description: "Image name (org/imagen)"
        required: true
        default: "ucm-fdi-tfm-devsecops/tfm-app"
      image_tar:
        description: "Nombre del artifact de la imagen"
        required: true
        default: "docker-image.tar"

permissions:
  id-token: write # Necesario para cosign keyless (OIDC)
  contents: read # Permite poder acceder al código fuente del repositorio.
  packages: write # Necesario para push a GHCR
  security-events: write # Permite poder subir los resultados del escaneo (SARIF) al Security Dashboard de GitHub.

jobs: # Se usa para definir uno o más trabajos a ejecutar en el workflow.
  # --- 1ª columna ---
  init:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tagging.outputs.tags }}
    steps:
      - name: Generate Image Tag
        id: tagging
        run: |
          echo "tags=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
  
  secrets-scan: # Analisis de secretos
    needs: init
    uses: ./.github/workflows/Secrets_Scan.yml
    secrets: 
      gitleaks_license: ${{ secrets.GITLEAKS_LICENSE }}
      
  iac-security: # Analisis de la infraestructura como códgo.
    needs: init
    uses: ./.github/workflows/IaC_Security.yml # Ruta del workflow donde se ejecuta el iac security.
    secrets: inherit

  sca: # Analisis de dependencias de terceros
    needs: [iac-security, secrets-scan] # Depende de que el escaneo de secretos acabe satisfactoriamente para poder empezar.
    uses: ./.github/workflows/SCA.yml # Ruta del workflow donde se ejecuta el sca.
    secrets: inherit

  sast: # Analisis estático de vulnerabilidadees en el código.
    needs: [iac-security, secrets-scan] # Depende de que el escaneo de secretos acabe satisfactoriamente para poderempezar.
    uses: ./.github/workflows/SAST.yml # Ruta del workflow donde se ejecuta el sast.
    secrets: inherit

  # --- Docker build espera a que acaben satisfactoriamente sca/sast/iac ---
  docker-build: # Montaje del docker.
    needs: [init, iac-security, secrets-scan] # Depende de que iac security acabe satisfactoriamente para poder empezar.
    uses: ./.github/workflows/Docker_Build.yml # Ruta del workflow donde se ejecuta el docker build.
    with:
      registry:   ${{ github.event.inputs.registry }}
      image_name: ${{ github.event.inputs.image_name }}
      image_tag:  ${{ needs.init.outputs.image_tag }}
      image_tar:  ${{ github.event.inputs.image_tar }}
    secrets:
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

  image-scan:
    needs: [init, docker-build, sca, sast]
    uses: ./.github/workflows/ImageScan.yml
    with:
      image_name: ${{ github.event.inputs.image_name }}
      image_tag:  ${{ needs.init.outputs.image_tag }}
    secrets: inherit

  container-signing:
    needs: [init, image-scan]
    uses: ./.github/workflows/Container_Signing.yml
    with:
      registry:   ${{ github.event.inputs.registry }}
      image_name: ${{ github.event.inputs.image_name }}
      image_tag:  ${{ needs.init.outputs.image_tag }}
    secrets: inherit
